[{"/Users/jennifersycamore/superchat/src/reportWebVitals.js":"1","/Users/jennifersycamore/superchat/src/App.js":"2","/Users/jennifersycamore/superchat/src/index.js":"3"},{"size":362,"mtime":1611159687045,"results":"4","hashOfConfig":"5"},{"size":2667,"mtime":1611528763792,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1611159687044,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lkwrim",{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jennifersycamore/superchat/src/reportWebVitals.js",[],"/Users/jennifersycamore/superchat/src/App.js",["15","16"],"import React, { useState, useRef } from 'react';\nimport './App.css';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyAgSl05jUY01ns9JM0ekoyHbzz10jIzf4c\",\n  authDomain: \"chat-app-ac6fe.firebaseapp.com\",\n  projectId: \"chat-app-ac6fe\",\n  storageBucket: \"chat-app-ac6fe.appspot.com\",\n  messagingSenderId: \"824141881410\",\n  appId: \"1:824141881410:web:68a867abf0dca7705ecddb\",\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\n\n\nfunction App() {\nconst [user] = useAuthState(auth);\nreturn (\n  <div className=\"App\">\n    <header className=\"App-header\">\n    Superchat\n    </header>\n      <section>\n      {user ? <ChatRoom /> : <SignIn />}\n      </section>\n    \n  </div>\n);\n}\nfunction SignIn() {\nconst signInWithGoogle = () => {\n  const provider = new firebase.auth.GoogleAuthProvider();\n  auth.signInWithPopup(provider);\n}\nreturn (\n  <>\n  <button onClick={signInWithGoogle}>Sign in with Google</button>\n  <p>Do not violate the community guidelines or you will be banned</p>\n  </>\n)\n}\n\nfunction SignOut() {\nreturn auth.currentUser && (\n  <button onClick={() => auth.SignOut()}>Sign out</button>\n)\n}\n\nfunction ChatRoom() {\n\nconst empty = useRef()\nconst messagesRef = firestore.collection('messages');\nconst query = messagesRef.orderBy('createdAt').limit(25);\n\nconst [messages] = useCollectionData(query, {idField: 'id'});\n\nconst [formValue, setFormValue] = useState('');\n\nconst sendMessage = async(e) => {\n\n  e.preventDefault();\n\n  const {uid, photoURL} = auth.currentUser;\n\n  await messagesRef.add({\n    text: formValue,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n    uid,\n    photoURL\n  })\n  setFormValue('');\n\n  empty.current.scrollIntoView({ behavior: 'smooth'});\n}\n\nreturn (<>\n  <main>\n\n    {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n    <span ref={empty}></span>\n\n  </main>\n\n  <form onSubmit={sendMessage}>\n\n    <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\n\n    <button type=\"submit\" disabled={!formValue}>-></button>\n\n  </form>\n</>)\n}\nfunction ChatMessage(props){\n    const { text, uid, photoURL } = props.message;\n\n    const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n    return (<>\n      <div className={`message ${messageClass}`}>\n        <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\n        <p>{text}</p>\n      </div>\n    </>)\n}\nexport default App;\n","/Users/jennifersycamore/superchat/src/index.js",[],{"ruleId":"17","severity":1,"message":"18","line":51,"column":10,"nodeType":"19","messageId":"20","endLine":51,"endColumn":17},{"ruleId":"21","severity":1,"message":"22","line":109,"column":9,"nodeType":"23","endLine":109,"endColumn":90},"no-unused-vars","'SignOut' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]